---
description: rules for testing
globs: 
alwaysApply: false
---

# Testing Rules for Next.js Project

Based on your Feature-Sliced Design folder structure and installed libraries, here are the testing rules to follow:

- 통합 테스트 코드를 작성할 때 구성된 비즈니스 로직을 적절한 단위로 나눠 컴포넌트 집합을 검증하고  불필요한 불필요한 단위 테스트를 줄인다.

- 비즈니스 로직을 기준으로 통합 테스트를 나눌 때는: 
  
  1. 가능한 한 모킹을 하지 않고 실제와 유사하게 검증한다•
  
  2. 비즈니스 로직을 처리하는 상태 관리나 API 호출은 상위 컴포넌트에서 테스트 코드를 작성한다.
  
  3. 변경 가능성을 고려해 여러 도메인의 기능이 조합된 비즈니스 로직은 나눠 검증한다

## File Structure
1. Place test files adjacent to the code they test with .test.ts(x) suffix:

```shell
   src/
     entities/
       storage/
         ui/
           Grid.tsx
           Grid.test.tsx
```

2. Create test utilities in the shared layer:
```shell
   src/
     shared/
       lib/
         test/
           test-utils.tsx  // Custom render with providers
           mocks/          // API mocks
           fixtures/       // Test data

```

## Naming Conventions

```shell
   Button.tsx → Button.test.tsx

```

```tsx
   const renderWithProviders = (ui: React.ReactElement) => { /* ... */ };
```

```tsx
   describe('FileUpload', () => {
     it('shows error message when upload fails', () => { /* ... */ });
   });
```

## Code Style

1. Use arrow functions for test cases:

```ts
   // Good
   it('renders correctly', () => {
     // Test code
   });
   
   // Bad
   it('renders correctly', function() {
     // Test code
   });
```



2. Use early returns and avoid nested conditions:

```ts
   // Good
   const setupTest = () => {
     if (condition) {
       return renderA();
     }
     return renderB();
   };
   
   // Bad
   const setupTest = () => {
     if (condition) {
       renderA();
     } else {
       renderB();
     }
   };
```


3. Prefer explicit assertions over multiple assertions:

```tsx
   // Good
   expect(button).toBeInTheDocument();
   expect(button).toBeEnabled();
   
   // Bad
   expect(button).toBeInTheDocument().toBeEnabled();
```


## Testing Approach by Layer

1. Shared Layer (80%+ coverage):
- Unit test utilities, hooks, and UI components
- Focus on pure functions and reusable components

2. Entities Layer (70%+ coverage):
- Test UI components with mock data
- Test model logic and state management

3. Features Layer (60%+ coverage):
- Test user interactions and business logic
- Mock API calls with MSW

4. Widgets Layer (50%+ coverage):
- Test composition of features and entities
- Focus on integration between components

5. Pages Layer (30-40% coverage):
- Integration tests focusing on page composition
- Test data fetching with MSW


## Best Practices


1. Use render from your custom test-utils instead of directly from testing-library:

```tsx
   // Good
   import { render, screen } from '@/shared/lib/test/test-utils';
   
   // Bad
   import { render, screen } from '@testing-library/react';
```

2. Use userEvent for simulating user interactions:

```tsx
   // Good
   const { user } = render(<Button onClick={handleClick}>Click me</Button>);
   await user.click(screen.getByText('Click me'));
   
   // Bad
   fireEvent.click(screen.getByText('Click me'));
```

3. Use data-testid attributes sparingly, prefer user-centric queries:

```tsx
   // Good
   screen.getByRole('button', { name: 'Submit' });
   
   // Use data-testid only when necessary
   screen.getByTestId('file-upload-progress');
```

4. Mock external dependencies and API calls:

```tsx
   // Use vi.mock for module mocking
   vi.mock('@/shared/lib/api', () => ({
     fetchData: vi.fn().mockResolvedValue({ data: 'mocked data' }),
   }));
```

5. Clean up after each test:

```tsx
   afterEach(() => {
     vi.clearAllMocks();
   });
```



