---
description: code convention
globs: 
alwaysApply: false
---
- 아래는 지켜야할 코드 컨벤션이야 


- Boolean 의 경우에는 is Prefix를 기본적으로 사용하지만, has 등도 상황에 따라 허용합니다.

```ts

// Good
const Component = () => {
	const isDisabled = true;
	const hasButton = true;
	return (
		<button disabled={isDisabled} hasButton={hasButton} />
	)
}
// Bad
const Component = () => {
	const disabled = true;
	const buttonVisible = true;
	return (
		<button disabled={disabled} buttonVisible={buttonVisible} />
	)
}

```

- 배열의 경우 Postfix로 -s 를 추가해서 변수명을 작성합니다.

```ts
// Good
const items = [ ... ];
// Bad
const itemArr = [ ... ];
const itemList = [ ... ];
```

- React Component를 정의한 변수는 PascalCase로 정의합니다.

```ts
// Good
const FileCard = () => {
	const isDisabled = true;
	return (
		<button disabled={isDisabled} />
	)
}
// Bad
const fileCard = () => {
	const isDisabled = true;
	return (
		<button disabled={isDisabled} />
	)
}
 
```


- Type을 정의한 변수는 PascalCase로 정의합니다.

```ts

// Good
export type User = 'string'
// Bad
export type user = 'string'
```

- React Component와 Type을 제외한 나머지는 변수명은 camelCase로 정의합니다.
```ts

// Good
export const passwordSchema = z.string().min(1, { message: '비밀번호를 입력해주세요' });
// Bad
export const PasswordSchema = z.string().min(1, { message: '비밀번호를 입력해주세요' });
 ```

- 영어로 정의 했을 때 어색하거나 이해하기 어려운 경우에는 한글 변수명을 사용합니다
```ts
const 결제_내역 = 'hisgory';
const 코인_충전 = 'coin';
 
```

- 상수는 대문자로 컴포넌트 상단에 정의해줍니다
```ts
const AUTH = '인증'
function Component(){
}
```


- React Component를 정의한 파일의 이름은 PascalCase로 정의합니다.
```shell

// Good
- components
  - Dashboard.tsx
// Bad  
- components
  - dashboard.tsx
```



- 조건문의 경우 if else 패턴보다는 early return으로 처리합니다. (no-else-return)
```ts
// Good
const execExample = () => {
	if (a) {
		return b;
	}
	return c;
}
// Bad
const execExample = () => {
	if (a) {
		return b;
	} else {
		return c;
	}
}
 
```

- 삼항연산자의 경우, 중첩되지 않게 사용하도록 합니다.(no-nested-ternary)
```ts
// Good
const isExample = a ? b : c; 
const isExample2 = (() =>{
	if (a) {
		return b;
	}
	if (c) {
		return d;
	}
	return e;
}());
// Bad
const isExample2 = a ? b : c ? d : e;
```


- 숫자 값을 직접 정의할 경우 천 단위마다 _를 사용하여 구분합니다. 
```ts
// Good
const num = 10_000; // `_`를  1000 단위로 사용하여 구분합니다.
// Bad
const num = 10000; // 1000 단위로 구분합니다.
```


- 인라인 함수는 가능한 사용하지 않습니다.
```tsx
// Good
const Component = () => {

	const onClick = () => {
		setState("foo");
	}
	return (
		<Button 
			onClick={onClick}
		/>
	)
}
// Bad
const Component = () => {
  
	return (
		<Button 
			onClick={()=>	setState("foo")}
		/>
	)
}
```

- useMemo useCallback은 성능 이슈로 인해 최적화가 필요한 경우에만 사용합니다.


- 기본적으로 화살표 함수를 사용해서 함수를 정의합니다.
```ts
// Good
const foo = () => {
	...
}
// Bad
function foo() {
	return <div />
}
```

- React Component를 return 하지 않는 경우에는 .ts확장자로 파일을 정의합니다.

```tsx
// Good - useHook.ts
const useHook = () => {
	const [state, setState] = useState();
	return {
		state, 
		setState
	}
}
// Bad - useHook.tsx
const useHook = () => {
	const [state, setState] = useState();
	return {
		state, 
		setState
	} 
}
```

- boolean 값이 true인 경우 props로 전달할 때 true를 생략합니다.
```tsx
// Good 
const Component = () => {
	return (
		<button disabled />
	)
}
// Bad
const Component = () => {
	return (
		<button disabled={true} />
	)
}
```

- children이 없는 컴포넌트는 Self-Closing 태그를 사용합니다.

```tsx
// Good
function Component(){
  return <Table/>
}
// Bad
function Component(){
  return <Table></Table>
}
```

- Props로 함수를 전달할 때는 on- prefix를 사용하고,  Props로 전달하지 않고 함수를 선언한 컴포넌트에서 실행하는 경우에는 handle- prefix를 사용합니다.

```tsx
// Good
const Component = () => {
	const onClick = () => {
		console.log("Bar!");
	}
	const handleClick = () => {
		console.log("Foo!");
	}
	return (
		<>
			<Card onClick={onClick}/>
			<button onClick={handleClick} />
		</>
	)
}
// Bad
const Component = () => {
	const handleClick = () => {
		console.log("Foo!");
	}
	return <Card handleClick={handleClick} />
}
```
 

- props type의 경우에는 컴포넌트 상단에 정의합니다.
```tsx
// Good
type propsType = {
  foo:string;
  bar:string;
}
function component({foo, bar}:propsType){
 ...
} 
// Bad
import { propsType } from './types'
function component({foo, bar}:propsType){
 ...
} 
```


- 타입스크립트 요청 / 응답의 경우 Request / Response를 suffix로 합니다.
```ts
// Good
type ApiFooRequest = {
	// ...
}
// Bad
type ApiBarRequestData = {
	// ... 
}
type ApiBazRequestDto = {
	// ...
}
```

- 타입스크립트의 API 요청 / 응답 값은 알파벳 순으로 정의합니다.
```ts
// Good
type ApiFooRequest = {
	a: number;
	b: string;
	c: string;
}
// Bad
type ApiFooRequest = {
	c: number;
	a: string;
	b: string;
}
type ApiFooRequest = {
	b: string;
	c: number;
	a: string;
}
```

- 객체 타입의 값이 복잡한 경우 TSDoc으로 주석을 추가해줍니다.
```ts
type ComplexType = {
  /** 고유 번호 */
  id: number;
  ...
}
```

- 타입을 정의할 때 타입의 이름이 다른 변수명이 겹치는 경우, Type Suffix를 붙여줍니다.
```ts
// Good
export type ButtonProps = {
}
export type ButtonPropsType = {
  ...
}
// Bad
export type TButtonProps = {
  ...
}
```

- 타입을 정의하는 파일은 type 키워드를 통해서 export, import 합니다 `(Type-Only Imports and Exports)`
```ts
// Good
import type { SomethingType } from "xxx.type"
// Bad
import { SomethingType } from "xxx.type"
```

- 페이지 이름의 경우 kebab-case를 사용합니다.
```shell
// Good
├── app
│   ├── sign-in
│   ├── sign-up
// Bad
├── app
│   ├── signIn
│   ├── sign
```